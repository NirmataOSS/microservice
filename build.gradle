buildscript {
    repositories { mavenCentral() }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'war'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.8

if (!project.hasProperty("SERVICE_NAME")) {
    ext.SERVICE_NAME = "microservice"
    println "using service name: $SERVICE_NAME"
}

if (!project.hasProperty("SERVICE_TAG")) {
    ext.SERVICE_TAG = "latest"
    println "using service tag: $SERVICE_TAG"
}

if (!project.hasProperty("SERVICE_REPO")) {
    ext.SERVICE_REPO = "nirmata"
    println "using service repo: $SERVICE_REPO"
}

war {
   baseName = 'microservice'
}

repositories { 
	mavenCentral()
}

dependencies {	    
	compile 'com.sun.jersey:jersey-server:1.8'
	
	compile 'com.fasterxml.jackson.core:jackson-databind:2.2.0'
	compile 'com.google.guava:guava:18.0-rc1'
	
	compile 'org.apache.httpcomponents:httpclient:4.5.3'	
	
	compile 'org.slf4j:slf4j-api:1.6.4'
	compile 'ch.qos.logback:logback-classic:1.1.2'
	compile 'ch.qos.logback:logback-core:1.1.2'	
}

apply plugin: 'docker'

docker {
    useApi false
}

task copyWarToDocker(type: Copy) {
    from "build/libs/${war.baseName}.war"
    into 'build/docker/'
}

copyWarToDocker.dependsOn(build)

task copyToDocker(type: Copy) {
    delete 'build/docker'
	println "Building Dockerfile with service name: $SERVICE_NAME"

    from 'docker/Dockerfile'
    from 'docker/index.html'
    from 'docker/server.xml'
    into 'build/docker/'

    expand(SERVICE_NAME: "$SERVICE_NAME")
}

copyToDocker.dependsOn(copyWarToDocker)

task buildContainer(type: Docker) {
	println "Building Docker container image $SERVICE_REPO/$SERVICE_NAME:$SERVICE_TAG"

    tagVersion = "$SERVICE_TAG"
    tag = "$SERVICE_REPO/$SERVICE_NAME"
    dockerfile = file("${projectDir}/build/docker/Dockerfile")
    push = true
}

buildContainer.dependsOn(copyToDocker)
